/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.linkedin.hoptimator.k8s.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TableTrigger spec.
 */
@ApiModel(description = "TableTrigger spec.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-21T02:31:00.123Z[Etc/UTC]")
public class V1alpha1TableTriggerSpec {
  /**
   * Gets or Sets operations
   */
  @JsonAdapter(OperationsEnum.Adapter.class)
  public enum OperationsEnum {
    DELETE("Delete"),
    
    INSERT("Insert"),
    
    UPDATE("Update");

    private String value;

    OperationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationsEnum fromValue(String value) {
      for (OperationsEnum b : OperationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private List<OperationsEnum> operations = null;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_YAML = "yaml";
  @SerializedName(SERIALIZED_NAME_YAML)
  private String yaml;


  public V1alpha1TableTriggerSpec operations(List<OperationsEnum> operations) {
    
    this.operations = operations;
    return this;
  }

  public V1alpha1TableTriggerSpec addOperationsItem(OperationsEnum operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

   /**
   * Specific operations this trigger matches. If null, matches all operations.
   * @return operations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specific operations this trigger matches. If null, matches all operations.")

  public List<OperationsEnum> getOperations() {
    return operations;
  }


  public void setOperations(List<OperationsEnum> operations) {
    this.operations = operations;
  }


  public V1alpha1TableTriggerSpec schema(String schema) {
    
    this.schema = schema;
    return this;
  }

   /**
   * The schema the table belongs to, e.g. KAFKA.
   * @return schema
  **/
  @ApiModelProperty(required = true, value = "The schema the table belongs to, e.g. KAFKA.")

  public String getSchema() {
    return schema;
  }


  public void setSchema(String schema) {
    this.schema = schema;
  }


  public V1alpha1TableTriggerSpec table(String table) {
    
    this.table = table;
    return this;
  }

   /**
   * The table name, e.g. PageViewEvent.
   * @return table
  **/
  @ApiModelProperty(required = true, value = "The table name, e.g. PageViewEvent.")

  public String getTable() {
    return table;
  }


  public void setTable(String table) {
    this.table = table;
  }


  public V1alpha1TableTriggerSpec yaml(String yaml) {
    
    this.yaml = yaml;
    return this;
  }

   /**
   * Specifies the Job to re/create when the trigger fires.
   * @return yaml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the Job to re/create when the trigger fires.")

  public String getYaml() {
    return yaml;
  }


  public void setYaml(String yaml) {
    this.yaml = yaml;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1TableTriggerSpec v1alpha1TableTriggerSpec = (V1alpha1TableTriggerSpec) o;
    return Objects.equals(this.operations, v1alpha1TableTriggerSpec.operations) &&
        Objects.equals(this.schema, v1alpha1TableTriggerSpec.schema) &&
        Objects.equals(this.table, v1alpha1TableTriggerSpec.table) &&
        Objects.equals(this.yaml, v1alpha1TableTriggerSpec.yaml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operations, schema, table, yaml);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1TableTriggerSpec {\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    yaml: ").append(toIndentedString(yaml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

